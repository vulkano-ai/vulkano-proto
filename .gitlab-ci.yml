stages:
  - build
  - release


variables:
  PROTOC_VERSION: "3.14.0"
  PROTOC_ZIP: protoc-${PROTOC_VERSION}-linux-x86_32.zip


default:
  image: node:latest
  before_script:
    - npm ci --cache .npm --prefer-offline
    - |
      {
        echo "@${CI_PROJECT_ROOT_NAMESPACE}:registry=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/"
        echo "${CI_API_V4_URL#https?}/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=\${CI_JOB_TOKEN}"
      } | tee -a .npmrc
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .npm/

build-ts:
  image: node:18
  stage: build
  before_script:
    - apt-get update
    - apt-get install -y protobuf-compiler make
  script:
    - make init-node
    - make node
  artifacts:
    paths:
      - src/*
      - lib/*
  rules:
    - if: $CI_COMMIT_BRANCH

publish-npm:
  stage: release
  dependencies:
    - build-ts
  variables:
    NPM_REGISTRY: "@inference:registry"
    NPM_TOKEN: "${CI_JOB_TOKEN}"
  script:
    - npm config set ${NPM_REGISTRY} https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/npm/
    - npm config set -- '//gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken' "${GL_TOKEN}"
    - rm -rf .npm/_cacache .npm/_logs
    - npm run semantic-release
  only:
    - main
    - dev


build-python:
    image: python:3.9
    stage: build
    before_script:
        - apt-get update
        - apt-get install -y protobuf-compiler make gettext-base
    script:
        - make init-python
        - make python
        - pip install build twine
        - export VERSION=${CI_COMMIT_TAG} && cat setup.py | envsubst > src/py/setup.py
        - cp README.md src/py/README.md
        - cp setup.cfg src/py/setup.cfg
        - cd src/py/
        - python -m build
        - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
    artifacts:
        paths:
        - src/*
        - lib/*
    rules:
        - if: $CI_COMMIT_TAG
